export declare const fullFilePrompt = "\n**USER REQUEST:** \"{userRequest}\"\n\n**CURRENT FILE ({filePath}):**\n```jsx\n{fileContent}\n```\n\n**FILE ANALYSIS:**\n- Component: {componentName}\n- Lines: {lineCount}\n- Type: {fileType}\n- Purpose: {filePurpose}\n\n**PROJECT CONTEXT:**\n{projectSummary}\n\n**MODIFICATION CONTEXT:**\n{modificationSummary}\n\n**\uD83D\uDEA8 CRITICAL STRUCTURE PRESERVATION RULES - ABSOLUTE REQUIREMENTS:**\n\n**1. IMPORT PRESERVATION - ZERO TOLERANCE FOR CHANGES:**\n{preservationPrompt}\n\n**IMPORT RULES (BREAKING THESE WILL CAUSE VALIDATION FAILURE):**\n- \u274C NEVER modify, remove, or change ANY existing import statement\n- \u274C NEVER change import paths (keep @/components/ui/button exactly as @/components/ui/button)\n- \u274C NEVER change package names (keep 'react' as 'react', not React)\n- \u274C NEVER remove imports even if they appear unused\n- \u274C NEVER reorder existing imports\n- \u2705 ONLY ADD new imports if absolutely necessary (Lucide React icons only)\n- \u2705 Place NEW imports immediately after existing imports, never mixed in\n\n**EXACT IMPORT COPYING REQUIREMENT:**\nCopy every single existing import character-for-character, including:\n- Exact spacing and formatting\n- Exact package names and paths\n- Exact import syntax and punctuation\n- Exact line breaks and positioning\n\n**2. EXPORT PRESERVATION - ZERO TOLERANCE FOR CHANGES:**\n- \u274C NEVER modify ANY existing export statement\n- \u274C NEVER change component names in exports\n- \u274C NEVER change export syntax or structure\n- \u2705 Copy export statements exactly as they appear\n\n**3. COMPONENT STRUCTURE PRESERVATION:**\n- \u274C NEVER change the main component function/const name\n- \u274C NEVER change function parameters or props interface names\n- \u274C NEVER change the component's export structure\n- \u2705 Only modify the INTERNAL JSX and styling content\n\n**4. LAYOUT CHANGE IMPLEMENTATION GUIDELINES:**\n\n**For Color Scheme Changes:**\n-changes in hero section means homepage\n-change ui or layout means comprehensive changes in all pages and make it look different than it was looking\n- Update className values with new Tailwind color utilities\n- Maintain existing class structure, only change color values\n- Example: \"bg-blue-600\" \u2192 \"bg-yellow-500\" (keep same structure)\n- Ensure color consistency across all elements\n- Use complementary colors for text, backgrounds, and accents\n\n**For Layout Restructuring:**\n- Keep existing component hierarchy and structure\n- Only modify Tailwind layout classes (grid, flex, spacing)\n- Maintain responsive breakpoints (sm:, md:, lg:, xl:)\n- Preserve accessibility classes and ARIA attributes\n- Keep existing functionality and event handlers\n-layout changes try to generate new layout under these constraints\n\n**For Theme Changes:**\n- Update gradient backgrounds with new color schemes\n- Maintain shadow and border radius consistency\n- Keep hover and focus states with new color scheme\n- Ensure proper contrast ratios for accessibility\n- Update icons to match new theme if needed\n\n**5. CONTENT AND DATA PRESERVATION:**\n- \u274C NEVER remove or modify existing mock data unless specifically requested\n- \u274C NEVER change text content unless explicitly asked\n- \u274C NEVER remove existing functionality or business logic\n- \u2705 Keep all existing content, just update visual presentation\n- \u2705 Preserve all existing user data, examples, and placeholder information\n\n**6. VALIDATION-SAFE MODIFICATION APPROACH:**\n\n**Step 1: Copy Structure Exactly**\n```\n[EXACT COPY OF ALL IMPORTS - CHARACTER FOR CHARACTER]\n\n[EXACT COPY OF COMPONENT DECLARATION]\n```\n\n**Step 2: Modify Only Internal Content**\n- Update only className values for layout/color changes\n- Keep all existing JSX structure and hierarchy\n- Maintain all existing props and event handlers\n\n**Step 3: Copy Exports Exactly**\n```\n[EXACT COPY OF ALL EXPORTS - CHARACTER FOR CHARACTER]\n```\n\n**7. LAYOUT CHANGE PATTERNS:**\n\n**Golden/Yellow Theme Implementation:**\n- Primary: bg-yellow-500, bg-amber-500, bg-orange-500\n- Backgrounds: bg-gradient-to-br from-yellow-50 to-amber-100\n- Text: text-yellow-800, text-amber-900 for contrast\n- Accents: border-yellow-400, ring-yellow-300\n- Buttons: bg-yellow-600 hover:bg-yellow-700\n\n**White/Clean Theme Elements:**\n- Backgrounds: bg-white, bg-gray-50, bg-slate-50\n- Cards: bg-white shadow-lg border border-gray-100\n- Text: text-gray-900, text-slate-800 for readability\n- Subtle accents: border-gray-200, bg-gray-100\n\n**Responsive Layout Classes:**\n- Grid: grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Flex: flex flex-col sm:flex-row items-center\n- Spacing: space-y-4 md:space-y-6 lg:space-y-8\n- Padding: p-4 md:p-6 lg:p-8\n\n**8. COMMON LAYOUT CHANGE EXAMPLES:**\n\n**Color Scheme Update:**\n```jsx\n// BEFORE: className=\"bg-blue-600 text-white\"\n// AFTER:  className=\"bg-yellow-600 text-white\"\n```\n\n**Layout Restructuring:**\n```jsx\n// BEFORE: className=\"flex flex-col space-y-4\"\n// AFTER:  className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\n```\n\n**Theme Gradient Update:**\n```jsx\n// BEFORE: className=\"bg-gradient-to-r from-blue-600 to-purple-600\"\n// AFTER:  className=\"bg-gradient-to-r from-yellow-400 to-orange-500\"\n```\n\n**RESPONSE FORMAT - FOLLOW THIS EXACTLY:**\n\n```jsx\n[EXACT COPY OF ALL ORIGINAL IMPORTS - DO NOT MODIFY ANYTHING]\n[NEW LUCIDE IMPORTS ONLY IF NEEDED - PLACED AFTER EXISTING IMPORTS]\n\n[COMPONENT DECLARATION - EXACT SAME NAME AND STRUCTURE]\n  [ENHANCED JSX CONTENT WITH LAYOUT CHANGES]\n  [UPDATED TAILWIND CLASSES FOR NEW THEME/LAYOUT]\n  [PRESERVED FUNCTIONALITY AND CONTENT]\n[CLOSING COMPONENT BRACE]\n\n[EXACT COPY OF ALL ORIGINAL EXPORTS - DO NOT MODIFY ANYTHING]\n```\n\n**FINAL VALIDATION CHECKLIST:**\nBefore returning code, verify:\n\u2705 Every original import copied exactly (character-for-character)\n\u2705 Every original export copied exactly (character-for-character)\n\u2705 Component name unchanged from original\n\u2705 Only className values modified for layout/theme changes\n\u2705 All existing content and functionality preserved\n\u2705 No new packages imported (except Lucide React if needed)\n\u2705 Responsive design maintained with proper breakpoints\n\u2705 Color scheme applied consistently throughout component\n\n**CRITICAL REMINDER:**\n- This is a LAYOUT/THEME modification, NOT a component rewrite\n- PRESERVE structure, ENHANCE visual presentation\n- Copy imports/exports EXACTLY to pass validation\n- Focus on className changes for visual updates\n- When in doubt, preserve existing code structure\n";
export declare const targetedNodesPrompt = "\n**USER REQUEST:** \"{prompt}\"\n\n**TARGET NODES TO MODIFY:**\n{targetNodes}\n\n**FILE CONTEXT:**\n**File:** {filePath}\n**Component:** {componentName}\n**Purpose:** {componentPurpose}\n\n**PROJECT CONTEXT:**\n{projectSummary}\n\n**PRECISION MODIFICATION GUIDELINES:**\n\n**1. SURGICAL PRECISION:**\n- Modify ONLY the specified target nodes/elements\n- Preserve ALL surrounding code structure exactly\n- Maintain existing functionality and mock data unless explicitly requested\n- Keep the overall component architecture completely intact\n- Do NOT modify imports, exports, or component structure\n\n**2. CONTENT PRESERVATION:**\n- PRESERVE all existing mock data, sample content, placeholder text\n- Keep existing user data, product information, content examples\n- Maintain the semantic meaning and purpose of elements\n- Only change content if explicitly requested in the user prompt\n\n**3. ICON HANDLING (IF NEEDED):**\n- If adding icons to target nodes, note the required import: import { IconName } from 'lucide-react'\n- Use semantic icon names that match the element's function\n- Common icons: ChevronRight, Home, User, Settings, Search, Menu, X, Plus, Edit, etc.\n- Include import information in your response for the calling system to handle\n\n**4. STYLING ENHANCEMENTS:**\n- Apply modern Tailwind CSS classes to target elements\n- Maintain consistency with surrounding elements\n- Use appropriate hover effects and transitions\n- Ensure responsive design for modified elements\n\n**5. CONTEXT AWARENESS:**\n- Consider the element's role within the larger component\n- Maintain visual harmony with surrounding elements\n- Preserve accessibility attributes and semantic structure\n- Keep consistent with the overall design pattern\n\n**RESPONSE FORMAT:**\nReturn ONLY a JSON object with the modified code for each target node:\n\n```json\n{\n  \"node_1_id\": {\n    \"modifiedCode\": \"<enhanced JSX code for this specific element>\",\n    \"requiredImports\": [\"IconName\", \"AnotherIcon\"]\n  },\n  \"node_2_id\": {\n    \"modifiedCode\": \"<enhanced JSX code maintaining context>\",\n    \"requiredImports\": []\n  }\n}\n```\n\n**IMPORTANT NOTES:**\n- modifiedCode should contain ONLY the JSX for that specific node/element\n- requiredImports should list any new Lucide React icons needed\n- Preserve all existing classes, attributes, and content unless specifically changing them\n- Focus on precise, targeted improvements while maintaining overall consistency\n\nRemember: Return ONLY the JSON with modified nodes and any required imports. No explanations.\n";
export declare const componentPrompt = "\n**USER REQUEST:** \"{userRequest}\"\n\nGenerate a PRODUCTION-READY React TypeScript component with exceptional design quality.\n\n**COMPONENT SPECIFICATIONS:**\n- Name: {componentName}\n- Type: {componentType}\n- Purpose: {componentPurpose}\n- Design Theme: Modern, professional, contemporary\n\n**DESIGN REQUIREMENTS:**\n\n**1. VISUAL EXCELLENCE:**\n- Stunning modern design with contemporary aesthetics\n- Beautiful gradient backgrounds and sophisticated color schemes\n- Professional shadows, depth, and layering effects\n- Smooth animations and micro-interactions with Tailwind CSS\n- Fully responsive design that works perfectly on all devices\n- Consistent spacing and typography hierarchy\n\n**2. ICON INTEGRATION:**\n- Use ONLY Lucide React icons with proper imports\n- Choose semantic icons that enhance functionality and user experience\n- Consistent icon sizing (w-4 h-4, w-5 h-5, w-6 h-6) and styling throughout\n- Common useful icons: Home, User, Settings, Search, Menu, X, ChevronRight, Plus, Edit, Trash2, Star, Heart, ArrowRight\n\n**3. MOCK DATA INTEGRATION:**\n- Include realistic, comprehensive mock data relevant to the component\n- Ensure data demonstrates the component's full functionality\n- Use varied, realistic examples that show real-world usage\n- Structure data properly with TypeScript interfaces\n\n**4. MODERN UI PATTERNS:**\n- Implement card-based layouts with proper shadows and borders\n- Use modern color schemes with Tailwind utilities\n- Include hover effects, transitions, and interactive states\n- Implement proper loading states and error handling where appropriate\n- Use contemporary spacing patterns and visual hierarchy\n\n**RESPONSE FORMAT:**\nReturn ONLY the TypeScript component code:\n\n```tsx\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { IconName, AnotherIcon, ThirdIcon } from 'lucide-react';\n\ninterface {componentName}Props {\n  className?: string;\n  // Additional props with proper TypeScript types\n}\n\ninterface DataInterface {\n  // Proper TypeScript interfaces for mock data\n}\n\nexport const {componentName}: React.FC<{componentName}Props> = ({ \n  className = '' \n}) => {\n  const [activeState, setActiveState] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\n  \n  // Comprehensive mock data\n  const mockData: DataInterface[] = [\n    // Realistic, varied mock data examples\n  ];\n  \n  return (\n    <div className={`min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100 ${className}`}>\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Beautiful, functional component content with modern design */}\n        \n        {/* Header Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Component Title\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Descriptive subtitle that explains the component purpose\n          </p>\n        </div>\n        \n        {/* Main Content Sections */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {mockData.map((item, index) => (\n            <Card key={index} className=\"hover:shadow-lg transition-shadow duration-300\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <IconName className=\"w-5 h-5 text-blue-600\" />\n                  {item.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {/* Dynamic content based on mock data */}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Interactive Elements */}\n        <div className=\"mt-12 text-center\">\n          <Button \n            onClick={() => setActiveState(!activeState)}\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Interactive Action\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default {componentName};\n```\n\nCreate a component that sets the standard for modern web development with exceptional design quality.\n";
export declare const pagePrompt = "\n**USER REQUEST:** \"{userRequest}\"\n\nGenerate a PRODUCTION-READY React TypeScript page with multiple sections and stunning design.\n\n**PAGE SPECIFICATIONS:**\n- Name: {pageName}\n- Sections: Hero, Features, Content, CTA sections\n- Description: {pageDescription}\n- Theme: Modern, professional, engaging\n\n**PAGE REQUIREMENTS:**\n- Multiple distinct, well-designed content sections\n- Beautiful hero section with gradients and modern styling\n- Professional layout with proper spacing and responsive design\n- Interactive elements with hover effects and animations\n- Mobile-responsive design with Tailwind breakpoints\n- Engaging content with comprehensive mock data\n- Strategic use of Lucide React icons throughout\n\n**RESPONSE FORMAT:**\nReturn ONLY the TypeScript page code:\n\n```tsx\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronRight, Star, ArrowRight, CheckCircle, Users, Target, Zap } from 'lucide-react';\n\nexport const {pageName}: React.FC = () => {\n  const [activeSection, setActiveSection] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  \n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n  \n  // Comprehensive mock data for the page\n  const features = [\n    {\n      icon: <Zap className=\"w-8 h-8 text-blue-600\" />,\n      title: \"Feature One\",\n      description: \"Detailed description of this amazing feature\"\n    },\n    // More feature objects...\n  ];\n   \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700\"></div>\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"relative max-w-7xl mx-auto text-center text-white\">\n          <div className={`transform transition-all duration-1000 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">\n              Page Title\n              <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-yellow-300 to-orange-300\">\n                Compelling Subtitle\n              </span>\n            </h1>\n            <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto leading-relaxed opacity-90\">\n              Engaging description that captures the essence of this page and motivates users to take action.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button className=\"bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 text-lg font-semibold rounded-lg transition-all duration-300 transform hover:scale-105\">\n                Primary CTA\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n              <Button variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg font-semibold rounded-lg transition-all duration-300\">\n                Secondary CTA\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n       \n      {/* Features Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Key Features\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Discover the powerful features that make this page exceptional\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-white/80 backdrop-blur-sm\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <div className=\"p-3 bg-blue-100 rounded-lg\">\n                      {feature.icon}\n                    </div>\n                    <CardTitle className=\"text-xl text-gray-900\">\n                      {feature.title}\n                    </CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 leading-relaxed\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n      \n      {/* Content Section */}\n      <section className=\"py-20 px-4 bg-white/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n                Content Section Title\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-8 leading-relaxed\">\n                Detailed content that provides value to users and explains key concepts or benefits.\n              </p>\n              \n              <div className=\"space-y-4 mb-8\">\n                {['Benefit One', 'Benefit Two', 'Benefit Three'].map((benefit, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-500 flex-shrink-0\" />\n                    <span className=\"text-gray-700 font-medium\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n              \n              <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-300\">\n                Learn More\n                <ChevronRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl p-8 text-white\">\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"text-center\">\n                    <Users className=\"w-12 h-12 mx-auto mb-4\" />\n                    <div className=\"text-3xl font-bold\">10K+</div>\n                    <div className=\"text-blue-100\">Users</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <Target className=\"w-12 h-12 mx-auto mb-4\" />\n                    <div className=\"text-3xl font-bold\">99%</div>\n                    <div className=\"text-blue-100\">Success Rate</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* CTA Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center text-white\">\n          <h2 className=\"text-4xl font-bold mb-6\">\n            Ready to Get Started?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join thousands of satisfied users and experience the difference today.\n          </p>\n          <Button className=\"bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 text-lg font-semibold rounded-lg transition-all duration-300 transform hover:scale-105\">\n            Get Started Now\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default {pageName};\n```\n";
export declare const appPrompt = "\n**USER REQUEST:** \"{userRequest}\"\n\nGenerate the complete App.tsx file with professional navigation and routing.\n\n**APP SPECIFICATIONS:**\n- Pages: {pagesList}\n- Navigation: Professional header with mobile responsiveness\n- Theme: Modern, clean, professional design\n- Routing: React Router with smooth navigation\n\n**REQUIREMENTS:**\n- Beautiful sticky navigation header with gradient background\n- Smooth routing between pages with React Router\n-import will be like as every page or component will be default export\n- Mobile hamburger menu with animations\n- Professional design with consistent theme\n- Responsive navigation that works on all devices\n- Modern UI patterns with Tailwind CSS\n\n**RESPONSE FORMAT:**\nReturn ONLY the TypeScript App code:\n\n```tsx\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useLocation } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Menu, X, Home, User, Settings, Mail, Info } from 'lucide-react';\n\n// Import your page components here\n// import HomePage from './pages/HomePage';\n// import AboutPage from './pages/AboutPage';\n// etc.\n\nfunction Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const location = useLocation();\n  \n  const navigation = [\n    { name: 'Home', href: '/', icon: Home },\n    { name: 'About', href: '/about', icon: Info },\n    { name: 'Services', href: '/services', icon: Settings },\n    { name: 'Contact', href: '/contact', icon: Mail },\n  ];\n  \n  return (\n    <header className=\"sticky top-0 z-50 bg-white/90 backdrop-blur-lg border-b border-gray-200/20 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link to=\"/\" className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Your Logo\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-8\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              const isActive = location.pathname === item.href;\n              return (\n                <Link\n                  key={item.name}\n                  to={item.href}\n                  className={`flex items-center gap-2 px-3 py-2 rounded-lg font-medium transition-all duration-200 ${\n                    isActive \n                      ? 'text-blue-600 bg-blue-50' \n                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  {item.name}\n                </Link>\n              );\n            })}\n          </nav>\n          \n          {/* Desktop CTA */}\n          <div className=\"hidden md:flex items-center gap-4\">\n            <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n              Get Started\n            </Button>\n          </div>\n          \n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden border-t border-gray-200 bg-white/95 backdrop-blur-lg\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              const isActive = location.pathname === item.href;\n              return (\n                <Link\n                  key={item.name}\n                  to={item.href}\n                  className={`flex items-center gap-3 px-3 py-2 rounded-lg font-medium transition-all duration-200 ${\n                    isActive \n                      ? 'text-blue-600 bg-blue-50' \n                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'\n                  }`}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  {item.name}\n                </Link>\n              );\n            })}\n            <div className=\"pt-4 mt-4 border-t border-gray-200\">\n              <Button className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50\">\n        <Navigation />\n        \n        {/* Main Content */}\n        <main className=\"flex-1\">\n          <Routes>\n            {/* Replace these with your actual page components */}\n            <Route path=\"/\" element={\n              <div className=\"min-h-screen flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Welcome to Your App</h1>\n                  <p className=\"text-lg text-gray-600\">Replace this with your HomePage component</p>\n                </div>\n              </div>\n            } />\n            <Route path=\"/about\" element={\n              <div className=\"min-h-screen flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">About Page</h1>\n                  <p className=\"text-lg text-gray-600\">Replace this with your AboutPage component</p>\n                </div>\n              </div>\n            } />\n            <Route path=\"/services\" element={\n              <div className=\"min-h-screen flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Services Page</h1>\n                  <p className=\"text-lg text-gray-600\">Replace this with your ServicesPage component</p>\n                </div>\n              </div>\n            } />\n            <Route path=\"/contact\" element={\n              <div className=\"min-h-screen flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Contact Page</h1>\n                  <p className=\"text-lg text-gray-600\">Replace this with your ContactPage component</p>\n                </div>\n              </div>\n            } />\n          </Routes>\n        </main>\n        \n        {/* Footer */}\n        <footer className=\"bg-gray-900 text-white py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <p className=\"text-gray-400\">\n                \u00A9 2024 Your Company. All rights reserved.\n              </p>\n            </div>\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n```\n";
export declare function replaceTemplateVariables(template: string, variables: Record<string, string>): string;
export declare function getEnhancedPromptForApproach(approach: 'FULL_FILE' | 'TARGETED_NODES' | 'COMPONENT_ADDITION' | 'DEPENDENCY_UPDATE'): string;
export declare function getComponentPrompt(componentType: 'component' | 'page' | 'app'): string;
export declare function prepareFullFileVariables(userRequest: string, filePath: string, fileContent: string, projectSummary: string, fileAnalysis: {
    componentName?: string;
    lineCount: number;
    fileType: string;
    filePurpose: string;
}, preservationPrompt: string, modificationSummary?: string): Record<string, string>;
export declare function prepareLayoutChangeVariables(userRequest: string, filePath: string, fileContent: string, projectSummary: string, fileAnalysis: {
    componentName?: string;
    lineCount: number;
    fileType: string;
    filePurpose: string;
}, preservationPrompt: string, modificationSummary?: string): Record<string, string>;
export declare function prepareTargetedNodesVariables(prompt: string, filePath: string, componentName: string, componentPurpose: string, targetNodes: string, projectSummary: string): Record<string, string>;
export declare function prepareComponentVariables(userRequest: string, componentName: string, componentType: 'component' | 'page' | 'app', componentPurpose: string, designTheme?: string): Record<string, string>;
export declare function createLayoutRepairFunction(): (brokenContent: string, originalContent: string, componentName?: string) => string | null;
